{% extends 'base.jinja2' %}

{% block head %}
  <meta charset="utf-8" />
  <style>
    html {
      font-family: arial;
    }
  </style>
  <link rel="stylesheet" href="/static/xterm.css"/>
{% endblock %}

{% block content %}
  <div class="w3-container w3-indigo">
    <h2>Terminal</h2>
  </div>

  <a href="/close_terminal">
    <div class="w3-container w3-red">
      <p>{{ icon('exclamation-triangle') }} Click here to close the terminal (it's important that you don't just close the page)</p>
    </div>
  </a>

  <div style="width: 100%; height: 700px" id="terminal">
  </div>

  <!-- xterm -->
  <script src="/static/xterm.js"></script>
  <script src="/static/xterm-addon-fit.js"></script>
  <script src="/static/xterm-addon-web-links.js"></script>
  <script src="/static/xterm-addon-search.js"></script>
  <script src="/static/socket.io.min.js"></script>

  <script>
      const term = new Terminal({
        cursorBlink: true,
        macOptionIsMeta: true,
        fontSize: 16,
        fontFamily: "Jetbrains Mono,Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace",
      });
      term.attachCustomKeyEventHandler(customKeyEventHandler);
      // https://github.com/xtermjs/xterm.js/issues/2941
      const fit = new FitAddon.FitAddon();
      term.loadAddon(fit);
      term.loadAddon(new WebLinksAddon.WebLinksAddon());
      term.loadAddon(new SearchAddon.SearchAddon());

      term.open(document.getElementById("terminal"));
      fit.fit();
      term.resize(15, 50);
      console.log(`size: ${term.cols} columns, ${term.rows} rows`);
      fit.fit();
      term.writeln('')
      term.onData((data) => {
        console.log("browser terminal received new data:", data);
        socket.emit("pty-input", { input: data });
      });

      const socket = io.connect("/pty");
      const status = document.getElementById("status");

      socket.on("pty-output", function (data) {
        console.log("new output received from server:", data.output);
        term.write(data.output);
      });

      socket.on("connect", () => {
        fitToscreen();
      });

      socket.on("disconnect", () => {
      });

      function fitToscreen() {
        fit.fit();
        const dims = { cols: term.cols, rows: term.rows };
        console.log("sending new dimensions to server's pty", dims);
        socket.emit("resize", dims);
      }

      function debounce(func, wait_ms) {
        let timeout;
        return function (...args) {
          const context = this;
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(context, args), wait_ms);
        };
      }

      /**
       * Handle copy and paste events
       */
      function customKeyEventHandler(e) {
        if (e.type !== "keydown") {
          return true;
        }
        if (e.ctrlKey && e.shiftKey) {
          const key = e.key.toLowerCase();
          if (key === "v") {
            // ctrl+shift+v: paste whatever is in the clipboard
            navigator.clipboard.readText().then((toPaste) => {
              term.writeText(toPaste);
            });
            return false;
          } else if (key === "c" || key === "x") {
            const toCopy = term.getSelection();
            navigator.clipboard.writeText(toCopy);
            term.focus();
            return false;
          }
        }
        return true;
      }

      const wait_ms = 50;
      window.onresize = debounce(fitToscreen, wait_ms);
  </script>
{% endblock %}
